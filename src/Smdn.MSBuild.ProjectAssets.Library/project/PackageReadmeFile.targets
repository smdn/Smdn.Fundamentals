<!--
SPDX-FileCopyrightText: 2022 smdn <smdn@smdn.jp>
SPDX-License-Identifier: MIT
-->
<Project>
  <PropertyGroup>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageReadmeFileOutputPath>$(OutputPath)$(PackageReadmeFile)</PackageReadmeFileOutputPath>
    <GenerateNupkgReadmeFileDependsOnTargets>$(GenerateNupkgReadmeFileDependsOnTargets);GenerateNupkgReadmeFileContent</GenerateNupkgReadmeFileDependsOnTargets>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(APIListEnableGenerating)' == 'true' and '$(IncludeBuildOutput)' != 'false' "> <!-- default value of 'IncludeBuildOutput' is empty, not 'true' -->
    <GenerateNupkgReadmeFileDependsOnTargets>$(GenerateNupkgReadmeFileDependsOnTargets);GenerateNupkgReadmeFileContentAPIList</GenerateNupkgReadmeFileDependsOnTargets>
  </PropertyGroup>

  <ItemGroup>
    <None Include="$(PackageReadmeFileOutputPath)" Pack="true" PackagePath="$(PackageReadmeFile)" />
  </ItemGroup>

  <Target Name="GenerateNupkgReadmeFileContent">
    <PropertyGroup>
      <!-- set default content -->
      <PackageReadmeFileContent
        Condition=" '$(PackageReadmeFileContent)' == '' "
      ># $(Product)%0A$(Description)</PackageReadmeFileContent>
    </PropertyGroup>
  </Target>

  <Target
    Name="GenerateNupkgReadmeFileContentAPIList"
    DependsOnTargets="GenerateNupkgReadmeFileContent"
    Condition=" '@(ApiListFiles)' != '' "
  >
    <GetLatestFramework Frameworks="$(TargetFrameworks)" Condition="'$(TargetFrameworks)' != ''">
      <Output TaskParameter="LatestFramework" PropertyName="LatestTargetFramework" />
    </GetLatestFramework>

    <PropertyGroup>
      <!-- refer TargetFramework instead of TargetFramework*s* -->
      <LatestTargetFramework Condition="'$(LatestTargetFramework)' == ''">$(TargetFramework)</LatestTargetFramework>
    </PropertyGroup>

    <ItemGroup>
      <ApiListFileOfLatestFramework Include="%(ApiListFiles.Identity)" Condition="'%(ApiListFiles.TargetFramework)' == '$(LatestTargetFramework)'" />
    </ItemGroup>

    <PropertyGroup>
      <PackageReadmeFileContent><![CDATA[$(PackageReadmeFileContent)
## API List
List of APIs exposed by assembly `$(AssemblyName)-$(InformationalVersion)` ($(LatestTargetFramework))
```cs]]></PackageReadmeFileContent>
    </PropertyGroup>

    <ItemGroup>
      <_PackageReadmeApiListFilesContent Include="$([System.IO.File]::ReadAllText('%(ApiListFileOfLatestFramework.Identity)'))" />
    </ItemGroup>

    <PropertyGroup>
      <PackageReadmeFileContent><![CDATA[$(PackageReadmeFileContent)
@(_PackageReadmeApiListFilesContent, '%0A')
```]]></PackageReadmeFileContent>
    </PropertyGroup>
  </Target>

  <Target
    Name="GenerateNupkgReadmeFile"
    BeforeTargets="GenerateNuspec"
    DependsOnTargets="$(GenerateNupkgReadmeFileDependsOnTargets)"
  >
    <PropertyGroup>
      <_PackageReadmeFileFinalContent
        Condition=" '$(PackageReadmeFileContentPreamble)' != '' "
      >$(PackageReadmeFileContentPreamble)%0A</_PackageReadmeFileFinalContent>
      <_PackageReadmeFileFinalContent
        Condition=" '$(PackageReadmeFileContent)' != '' "
      >$(_PackageReadmeFileFinalContent)$(PackageReadmeFileContent)%0A</_PackageReadmeFileFinalContent>
      <_PackageReadmeFileFinalContent
        Condition=" '$(PackageReadmeFileContentPostamble)' != '' "
      >$(_PackageReadmeFileFinalContent)$(PackageReadmeFileContentPostamble)%0A</_PackageReadmeFileFinalContent>
    </PropertyGroup>

    <WriteLinesToFile
      File="$(PackageReadmeFileOutputPath)"
      Lines="$(_PackageReadmeFileFinalContent)"
      Overwrite="true"
    />
  </Target>

  <UsingTask
    TaskName="GetLatestFramework"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll"
  >
    <ParameterGroup>
      <Frameworks ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <LatestFramework ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Linq" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        LatestFramework = Frameworks
          ?.Select(static item => item.ItemSpec)
          ?.Select(static moniker => {
            if (moniker.StartsWith("netcoreapp", StringComparison.OrdinalIgnoreCase))
              return new { Moniker = moniker, Identifier = ".NETCoreApp", Version = moniker.Substring("netcoreapp".Length) };

            if (moniker.StartsWith("netstandard", StringComparison.OrdinalIgnoreCase))
              return new { Moniker = moniker, Identifier = ".NETStandard", Version = moniker.Substring("netstandard".Length) };

            if (
              moniker.StartsWith("net4", StringComparison.OrdinalIgnoreCase) ||
              moniker.StartsWith("net3", StringComparison.OrdinalIgnoreCase) ||
              moniker.StartsWith("net2", StringComparison.OrdinalIgnoreCase) ||
              moniker.StartsWith("net1", StringComparison.OrdinalIgnoreCase)
            )
              return new { Moniker = moniker, Identifier = ".NETFramework", Version = moniker.Substring("net".Length).PadRight(3, '0') };

            if (moniker.StartsWith("net", StringComparison.OrdinalIgnoreCase))
              return new { Moniker = moniker, Identifier = ".NETCoreApp", Version = moniker.Substring("net".Length) };

            return new { Moniker = moniker, Identifier = "unknown", Version = moniker };
          })
          ?.OrderBy(static f => f.Identifier switch {
            ".NETCoreApp" => 0,
            ".NETStandard" => 1,
            ".NETFramework" => 2,
            _ => int.MaxValue,
          })
          ?.ThenByDescending(static f => f.Version)
#if false
          ?.Select(/*static*/ (f, index) => {
            Log.LogMessage(MessageImportance.High, $"#{index}: Moniker={f.Moniker}, Identifier={f.Identifier}, Version={f.Version}");
            return f;
          })
          ?.ToList()
#endif
          ?.Select(static f => f.Moniker)
          ?.First();
      ]]></Code>
    </Task>
  </UsingTask>
</Project>
