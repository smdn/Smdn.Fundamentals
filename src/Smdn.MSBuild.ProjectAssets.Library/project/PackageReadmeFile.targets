<!--
SPDX-FileCopyrightText: 2022 smdn <smdn@smdn.jp>
SPDX-License-Identifier: MIT
-->
<Project>
  <PropertyGroup>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageReadmeFileOutputPath>$(OutputPath)$(PackageReadmeFile)</PackageReadmeFileOutputPath>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(APIListEnableGenerating)' == 'true' ">
    <GenerateNupkgReadmeFileDependsOnTargets>GenerateAPIListOfPackage</GenerateNupkgReadmeFileDependsOnTargets>
  </PropertyGroup>

  <ItemGroup>
    <None Include="$(PackageReadmeFileOutputPath)" Pack="true" PackagePath="$(PackageReadmeFile)" />
  </ItemGroup>

  <Target
    Name="GenerateNupkgReadmeFile"
    BeforeTargets="GenerateNuspec"
    DependsOnTargets="$(GenerateNupkgReadmeFileDependsOnTargets)"
  >
    <GetLatestFramework Frameworks="$(TargetFrameworks)" Condition=" '$(APIListEnableGenerating)' == 'true' ">
      <Output TaskParameter="LatestFramework" PropertyName="LatestTargetFramework" />
    </GetLatestFramework>

    <ItemGroup Condition=" '$(APIListEnableGenerating)' == 'true' ">
      <ApiListFileOfLatestFramework Include="%(ApiListFiles.Identity)" Condition="'%(ApiListFiles.TargetFramework)' == '$(LatestTargetFramework)'" />
    </ItemGroup>

    <ItemGroup Condition=" '$(APIListEnableGenerating)' == 'true' ">
      <NupkgReadmeLines Include="# $(Product)" />
      <NupkgReadmeLines Include="$(Description)%0A" />
      <NupkgReadmeLines Include="## API List" />
      <NupkgReadmeLines Include="List of APIs exposed by assembly `$(AssemblyName)-$(InformationalVersion)` ($(LatestTargetFramework)).%0A" />
      <NupkgReadmeLines Include="```cs" />
      <NupkgReadmeLines Include="$([System.IO.File]::ReadAllText('%(ApiListFileOfLatestFramework.Identity)'))" />
      <NupkgReadmeLines Include="```" />
    </ItemGroup>

    <WriteLinesToFile
      File="$(PackageReadmeFileOutputPath)"
      Lines="@(NupkgReadmeLines)"
      Overwrite="true"
    />
  </Target>

  <UsingTask
    TaskName="GetLatestFramework"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll"
  >
    <ParameterGroup>
      <Frameworks ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <LatestFramework ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Linq" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        LatestFramework = Frameworks
          ?.Select(static item => item.ItemSpec)
          ?.Select(static moniker => {
            if (moniker.StartsWith("netcoreapp", StringComparison.OrdinalIgnoreCase))
              return new { Moniker = moniker, Identifier = ".NETCoreApp", Version = moniker.Substring("netcoreapp".Length) };

            if (moniker.StartsWith("netstandard", StringComparison.OrdinalIgnoreCase))
              return new { Moniker = moniker, Identifier = ".NETStandard", Version = moniker.Substring("netstandard".Length) };

            if (
              moniker.StartsWith("net4", StringComparison.OrdinalIgnoreCase) ||
              moniker.StartsWith("net3", StringComparison.OrdinalIgnoreCase) ||
              moniker.StartsWith("net2", StringComparison.OrdinalIgnoreCase) ||
              moniker.StartsWith("net1", StringComparison.OrdinalIgnoreCase)
            )
              return new { Moniker = moniker, Identifier = ".NETFramework", Version = moniker.Substring("net".Length).PadRight(3, '0') };

            if (moniker.StartsWith("net", StringComparison.OrdinalIgnoreCase))
              return new { Moniker = moniker, Identifier = ".NETCoreApp", Version = moniker.Substring("net".Length) };

            return new { Moniker = moniker, Identifier = "unknown", Version = moniker };
          })
          ?.OrderBy(static f => f.Identifier switch {
            ".NETCoreApp" => 0,
            ".NETStandard" => 1,
            ".NETFramework" => 2,
            _ => int.MaxValue,
          })
          ?.ThenByDescending(static f => f.Version)
#if false
          ?.Select(/*static*/ (f, index) => {
            Log.LogMessage(MessageImportance.High, $"#{index}: Moniker={f.Moniker}, Identifier={f.Identifier}, Version={f.Version}");
            return f;
          })
          ?.ToList()
#endif
          ?.Select(static f => f.Moniker)
          ?.First();
      ]]></Code>
    </Task>
  </UsingTask>
</Project>
