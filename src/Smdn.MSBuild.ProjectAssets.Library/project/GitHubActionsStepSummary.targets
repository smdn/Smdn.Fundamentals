<!--
SPDX-FileCopyrightText: 2023 smdn <smdn@smdn.jp>
SPDX-License-Identifier: MIT
-->
<Project>
  <UsingTask
    TaskName="GitHubActionsStepSummaryAppendContent"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll"
  >
    <ParameterGroup>
      <Contents ParameterType="System.String" Required="true" />
      <PrependNewLine ParameterType="System.Boolean" />
    </ParameterGroup>

    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Threading" />
      <Using Namespace="System.Runtime.ExceptionServices" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        var pathToGitHubStepSummary = Environment.GetEnvironmentVariable("GITHUB_STEP_SUMMARY");

        if (string.IsNullOrEmpty(pathToGitHubStepSummary))
          return Success;

        if (PrependNewLine) {
          TryIO(
            () => File.AppendAllText(
              path: pathToGitHubStepSummary,
              contents: Environment.NewLine + Environment.NewLine
            )
          );
        }

        TryIO(
          () => File.AppendAllText(
            path: pathToGitHubStepSummary,
            contents: Contents
          )
        );

        static void TryIO(Action action)
        {
          const int maxRetry = 10;
          const int interval = 200;

          Exception caughtException = null;

          for (var retry = maxRetry; retry != 0; retry--) {
            try {
              action();
              return;
            }
            catch (IOException ex) {
              caughtException = ex;
            }
            catch (UnauthorizedAccessException ex) {
              caughtException = ex;
            }

            Thread.Sleep(interval);
          }

          if (caughtException is not null)
            ExceptionDispatchInfo.Capture(caughtException).Throw();
        }
      ]]></Code>
    </Task>
  </UsingTask>
</Project>
