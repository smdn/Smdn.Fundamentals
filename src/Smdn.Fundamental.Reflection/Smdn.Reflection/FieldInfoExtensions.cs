// SPDX-FileCopyrightText: 2022 smdn <smdn@smdn.jp>
// SPDX-License-Identifier: MIT
using System;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace Smdn.Reflection;

public static class FieldInfoExtensions {
  private static BindingFlags GetBindingFlagsForAutoGeneratedMember(FieldInfo f)
    => (f.IsStatic ? BindingFlags.Static : BindingFlags.Instance) | BindingFlags.Public | BindingFlags.NonPublic;

  private static bool IsAutoGeneratedField(FieldInfo f)
    => f.IsDefined(typeof(CompilerGeneratedAttribute));

  public static bool IsPropertyBackingField(this FieldInfo f)
  {
    if (f is null)
      throw new ArgumentNullException(nameof(f));
    if (!IsAutoGeneratedField(f))
      return false;
    if (f.DeclaringType is null)
      return false; // or throw exception?

    var property = f.DeclaringType
      .GetProperties(GetBindingFlagsForAutoGeneratedMember(f))
      .Where(static p => PropertyInfoExtensions.IsAccessorAutoGenerated(p))
      .FirstOrDefault(p => p.GetBackingField() == f);

    return property is not null;
  }

  public static bool IsEventBackingField(this FieldInfo f)
  {
    if (f is null)
      throw new ArgumentNullException(nameof(f));
    if (!IsAutoGeneratedField(f))
      return false;
    if (f.DeclaringType is null)
      return false; // or throw exception?

    var ev = f.DeclaringType.GetEvent(
      name: EventInfoExtensions.GetEventNameFromBackingField(f),
      bindingAttr: GetBindingFlagsForAutoGeneratedMember(f)
    );

    return ev is not null && EventInfoExtensions.IsAccessorAutoGenerated(ev);
  }
}
