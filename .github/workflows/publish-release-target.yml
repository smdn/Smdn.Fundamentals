# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: "2022 smdn <smdn@smdn.jp>"

name: Publish release target (reusable workflow)
run-name: Publish release target (Release PR \#${{ inputs.pr_number_request_for_release }})

permissions:
  contents: write
  packages: write
  pull-requests: read

on:
  workflow_call:
    inputs:
      pr_number_request_for_release:
        description: "The number of pull request that requests to merge the release working branch."
        required: true
        type: number

      pr_label_request_for_release:
        description: "The label which indicating that the PR requests to merge the release working branch."
        required: false
        type: string
        default: ''

      workflow_runs_on:
        description: "The OS label which run the workflow on. (ex: ubuntu-latest, ubuntu-22.04, ubuntu-20.04)"
        required: false
        type: string
        default: "ubuntu-latest"

      dotnet_sdk_version:
        description: "The minimum .NET SDK version which is used to publish the release target."
        required: false
        type: string
        default: '6.0.200'

      dry_run:
        description: "If true, performs a trial run."
        required: false
        type: boolean
        default: false

    secrets:
      token_repo:
        description: 'The token which is used to checkout code, view pull request of release target, download artifact from the precedent workflow, and create a new release.'
        required: true

      token_push_nuget_org:
        description: 'The token which is used to push a package to nuget.org.'
        required: false

      token_push_github_packages:
        description: 'The token which is used to push a package to GitHub Packages.'
        required: false

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true

jobs:
  publish-release-target:
    name: Publish release target (#${{ inputs.pr_number_request_for_release }})
    runs-on: ${{ inputs.workflow_runs_on }}
    outputs:
      release_tag:                  ${{ steps.release-info.outputs.release_tag }}
      release_note_url:             ${{ steps.release-info.outputs.release_note_url }}
      release_prerelease:           ${{ steps.release-info.outputs.release_prerelease }}
      release_draft:                ${{ steps.release-info.outputs.release_draft }}
      package_id:                   ${{ steps.release-info.outputs.package_id }}
      package_version:              ${{ steps.release-info.outputs.package_version }}
      package_branch:               ${{ steps.release-info.outputs.package_branch }}
      package_prevver_tag:          ${{ steps.release-info.outputs.package_prevver_tag }}
      package_available_nuget_org:  ${{ steps.push-nuget-org.outputs.pushed }}

    steps:
    - name: Check .NET SDK ${{ inputs.dotnet_sdk_version }} is installed
      id: dotnet-sdk-version
      shell: pwsh
      run: |
        $installed_version = [System.Version]::Parse($(dotnet --version))
        $required_version  = [System.Version]::Parse('${{ inputs.dotnet_sdk_version }}')

        if ( $required_version -gt $installed_version ) {
          # required SDK version is not installed
          "::notice::.NET SDK version: installed ${installed_version}, required ${required_version}"

          "install-dotnet-sdk-version=${required_version}" >> $Env:GITHUB_OUTPUT
        }

    - name: Install .NET SDK ${{ steps.dotnet-sdk-version.outputs.install-dotnet-sdk-version }}
      if: ${{ steps.dotnet-sdk-version.outputs.install-dotnet-sdk-version != '' }}
      uses: actions/setup-dotnet@v4.0.0
      with:
        dotnet-version: '${{ steps.dotnet-sdk-version.outputs.install-dotnet-sdk-version }}'

    - name: Checkout repository
      # note: checkout repository firstly due to working directory will be cleaned up on checkout
      uses: actions/checkout@v4.1.1
      with:
        token: ${{ secrets.token_repo }}
        persist-credentials: true

    - name: Configure git identity
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com

        # TODO
        # git config user.name '${{ github.repository_owner }}'
        # git config user.email '<>'

    - name: Check pull request labels
      if: ${{ inputs.pr_label_request_for_release != '' }}
      env:
        GH_TOKEN: ${{ secrets.token_repo }}
      shell: pwsh
      run: |
        $labels = gh pr view `
          ${{ inputs.pr_number_request_for_release }} `
          --repo ${{ github.repository }} `
          --json labels `
          --template '[ {{ range $i, $l := .labels }} {{if $i}},{{end}} ''{{$l.name}}'' {{ end }} ]'

        "${labels}"

        $release_pr_label = $labels | `
          ConvertFrom-Json | `
          where { $_ -eq '${{ inputs.pr_label_request_for_release }}' } | `
          select -First 1

        if ( [string]::IsNullOrEmpty( $release_pr_label ) ) {
          "::error::The required label '${{ inputs.pr_label_request_for_release }}' is not set to the pull request."
          exit 1
        }

    - name: Determine release target information
      id: release-info
      env:
        GH_TOKEN: ${{ secrets.token_repo }}
      shell: pwsh
      run: |
        $release_pr_body = gh pr view `
          ${{ inputs.pr_number_request_for_release }} `
          --repo ${{ github.repository }} `
          --json body `
          --template '{{.body}}'

        if ("$release_pr_body" -match ([regex]::escape('/${{ github.repository }}/actions/runs/') + '(?<run_id>[0-9]+)')) {
          $precedent_workflow_run_id = $Matches['run_id']
        }
        else {
          "::error::precedent workflow run id could not be determined."
          exit 1
        }

        $release_target_infoes = (
          $release_pr_body |
          Select-String -Pattern '(?m)^\- (?<key>[a-z_]+)\: \[?`(?<value>[^`]+)`\]?.*$' -AllMatches
        ).Matches
        $release_info_dict = [System.Collections.Generic.Dictionary[String, String]]::new()

        foreach ($pair in $release_target_infoes) {
          if ( ! $release_info_dict.ContainsKey($pair.Groups['key'].Value) ) {
            # stores the first value found
            $release_info_dict[$pair.Groups['key'].Value] = $pair.Groups['value'].Value
          }
        }

        [string]$package_target_tag = $null
        [string]$package_prevver_tag = $null
        [string]$package_id = $null
        [string]$package_id_with_version = $null
        [string]$package_version = $null
        [string]$package_branch = $null
        [string]$release_working_branch = $null
        [string]$release_tag = $null
        [string]$release_prerelease = $null
        [string]$release_draft = $null
        [string]$release_note_url = $null

        if ( ! $release_info_dict.TryGetValue( "package_target_tag", [ref]$package_target_tag ) ) {
          "::error::package_target_tag could not be determined."
          exit 1
        }
        if ( ! $release_info_dict.TryGetValue( "package_prevver_tag", [ref]$package_prevver_tag ) ) {
          "::warning::package_prevver_tag could not be determined."
        }
        if ( ! $release_info_dict.TryGetValue( "package_id", [ref]$package_id ) ) {
          "::error::package_id could not be determined."
          exit 1
        }
        if ( ! $release_info_dict.TryGetValue( "package_id_with_version", [ref]$package_id_with_version ) ) {
          "::error::package_id_with_version could not be determined."
          exit 1
        }
        if ( ! $release_info_dict.TryGetValue( "package_version", [ref]$package_version ) ) {
          "::error::package_version could not be determined."
          exit 1
        }
        if ( ! $release_info_dict.TryGetValue( "package_branch", [ref]$package_branch ) ) {
          "::error::package_branch could not be determined."
          exit 1
        }
        if ( ! $release_info_dict.TryGetValue( "release_working_branch", [ref]$release_working_branch ) ) {
          "::error::release_working_branch could not be determined."
          exit 1
        }
        if ( ! $release_info_dict.TryGetValue( "release_tag", [ref]$release_tag ) ) {
          "::error::release_tag could not be determined."
          exit 1
        }
        if ( ! $release_info_dict.TryGetValue( "release_prerelease", [ref]$release_prerelease ) ) {
          # if value is not explicitly specified, publish release as a prerelease
          $release_prerelease = "true"
        }
        if ( ! $release_info_dict.TryGetValue( "release_draft", [ref]$release_draft ) ) {
          # if value is not explicitly specified, publish release as a draft
          $release_draft = "true"
        }
        if ( ! $release_info_dict.TryGetValue( "release_note_url", [ref]$release_note_url ) ) {
          "::error::release_note_url could not be determined."
          exit 1
        }

        # notice determined info
        "## :shipit: Release target information" >> $Env:GITHUB_STEP_SUMMARY
        "" >> $Env:GITHUB_STEP_SUMMARY
        "| name | value |" >> $Env:GITHUB_STEP_SUMMARY
        "| ---- | ----- |" >> $Env:GITHUB_STEP_SUMMARY
        "| package_target_tag | ``${package_target_tag}`` |"                  >> $Env:GITHUB_STEP_SUMMARY
        "| package_prevver_tag | ``${package_prevver_tag}`` |"                >> $Env:GITHUB_STEP_SUMMARY
        "| package_id | ``${package_id}`` |"                                  >> $Env:GITHUB_STEP_SUMMARY
        "| package_id_with_version | ``${package_id_with_version}`` |"        >> $Env:GITHUB_STEP_SUMMARY
        "| package_version | ``${package_version}`` |"                        >> $Env:GITHUB_STEP_SUMMARY
        "| package_branch | ``${package_branch}`` |"                          >> $Env:GITHUB_STEP_SUMMARY
        "| release_working_branch | ``${release_working_branch}`` |"          >> $Env:GITHUB_STEP_SUMMARY
        "| release_tag | ``${release_tag}`` |"                                >> $Env:GITHUB_STEP_SUMMARY
        "| release_prerelease | ``${release_prerelease}`` |"                  >> $Env:GITHUB_STEP_SUMMARY
        "| release_draft | ``${release_draft}`` |"                            >> $Env:GITHUB_STEP_SUMMARY
        "| release_note_url | ``${release_note_url}`` |"                      >> $Env:GITHUB_STEP_SUMMARY
        "| precedent_workflow_run_id | ``${precedent_workflow_run_id}`` |"    >> $Env:GITHUB_STEP_SUMMARY

        # set outputs
        "package_target_tag=${package_target_tag}"                  >> $Env:GITHUB_OUTPUT
        "package_prevver_tag=${package_prevver_tag}"                >> $Env:GITHUB_OUTPUT
        "package_id=${package_id}"                                  >> $Env:GITHUB_OUTPUT
        "package_id_with_version=${package_id_with_version}"        >> $Env:GITHUB_OUTPUT
        "package_version=${package_version}"                        >> $Env:GITHUB_OUTPUT
        "package_branch=${package_branch}"                          >> $Env:GITHUB_OUTPUT
        "release_working_branch=${release_working_branch}"          >> $Env:GITHUB_OUTPUT
        "release_tag=${release_tag}"                                >> $Env:GITHUB_OUTPUT
        "release_prerelease=${release_prerelease}"                  >> $Env:GITHUB_OUTPUT
        "release_draft=${release_draft}"                            >> $Env:GITHUB_OUTPUT
        "release_note_url=${release_note_url}"                      >> $Env:GITHUB_OUTPUT
        "precedent_workflow_run_id=${precedent_workflow_run_id}"    >> $Env:GITHUB_OUTPUT

        [string]$artifact_name_nupkg = $null

        if ( $release_info_dict.TryGetValue( "artifact_name_nupkg", [ref] $artifact_name_nupkg ) ) {
          "| artifact_name_nupkg | ``${artifact_name_nupkg}`` |" >> $Env:GITHUB_STEP_SUMMARY

          "artifact_name_nupkg=${artifact_name_nupkg}" >> $Env:GITHUB_OUTPUT
        }
        else {
          "" >> $Env:GITHUB_STEP_SUMMARY
          ":warning: No packages will be published." >> $Env:GITHUB_STEP_SUMMARY
        }

        # check working and package branch
        $ref_names = gh pr view `
          ${{ inputs.pr_number_request_for_release }} `
          --repo ${{ github.repository }} `
          --json baseRefName,headRefName `
          --template '{{.baseRefName}} {{.headRefName}}'

        $ref_name_base = ($ref_names -split ' ')[0]
        $ref_name_head = ($ref_names -split ' ')[1]

        if ( $release_working_branch -ne $ref_name_head ) {
          "::error::expected working branch is '${release_working_branch}' but was '${ref_name_head}'."
          exit 1
        }
        if ( $package_branch -ne $ref_name_base ) {
          "::error::expected package branch is '${package_branch}' but was '${ref_name_base}'."
          exit 1
        }

    - name: Download package ${{ steps.release-info.outputs.artifact_name_nupkg }}
      if: ${{ !inputs.dry_run && steps.release-info.outputs.artifact_name_nupkg != '' }}
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{ secrets.token_repo }}
        workflow: generate-release-target.yml
        run_id:  ${{ steps.release-info.outputs.precedent_workflow_run_id }}
        name: ${{ steps.release-info.outputs.artifact_name_nupkg }}

    - name: Publish package ${{ steps.release-info.outputs.artifact_name_nupkg }} to nuget.org
      id: push-nuget-org
      if: ${{ !inputs.dry_run && env.NUGET_APIKEY != null && steps.release-info.outputs.artifact_name_nupkg != '' }}
      env:
        NUGET_APIKEY: ${{ secrets.token_push_nuget_org }}
        NUGET_SOURCE: 'https://api.nuget.org/v3/index.json'
      run: |
        dotnet nuget push \
          --api-key $NUGET_APIKEY \
          --source $NUGET_SOURCE \
          '${{ steps.release-info.outputs.artifact_name_nupkg }}'

        echo "pushed=true" >> $GITHUB_OUTPUT

        echo "## :package: nuget.org" >> $GITHUB_STEP_SUMMARY
        echo "The package '${{ steps.release-info.outputs.artifact_name_nupkg }}' was pushed to '$NUGET_SOURCE' successfully." >> $GITHUB_STEP_SUMMARY

    - name: Publish package ${{ steps.release-info.outputs.artifact_name_nupkg }} to GitHub packages
      id: push-github-packages
      if: ${{ !inputs.dry_run && env.NUGET_APIKEY != null && steps.release-info.outputs.artifact_name_nupkg != '' }}
      env:
        NUGET_APIKEY: ${{ secrets.token_push_github_packages }}
        NUGET_SOURCE: 'https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json'
      run: |
        dotnet nuget push \
          --api-key $NUGET_APIKEY \
          --source $NUGET_SOURCE \
          '${{ steps.release-info.outputs.artifact_name_nupkg }}'

        echo "pushed=true" >> $GITHUB_OUTPUT

        echo "## :package: GitHub packages" >> $GITHUB_STEP_SUMMARY
        echo "The package '${{ steps.release-info.outputs.artifact_name_nupkg }}' was pushed to '$NUGET_SOURCE' successfully." >> $GITHUB_STEP_SUMMARY

    - name: Delete package ${{ steps.release-info.outputs.artifact_name_nupkg }}
      if: ${{ steps.release-info.outputs.artifact_name_nupkg != '' }}
      run: |
        rm -f ${{ steps.release-info.outputs.artifact_name_nupkg }}

    - name: Create release tag ${{ steps.release-info.outputs.release_tag }}
      shell: pwsh
      env:
        GH_TOKEN: ${{ secrets.token_repo }}
      run: |
        $dry_run = '${{ inputs.dry_run }}' -ieq 'true'
        $tag_name = '${{ steps.release-info.outputs.release_tag }}'
        $tag_message = '${{ steps.release-info.outputs.package_branch }}/${{ steps.release-info.outputs.package_id_with_version }}'
        $head_commit = git rev-parse HEAD

        # get merge commit for the release PR
        $target_commit = gh pr view `
          ${{ inputs.pr_number_request_for_release }} `
          --repo ${{ github.repository }} `
          --json mergeCommit `
          --template '{{.mergeCommit.oid}}'

        if ( $target_commit ) {
          if ( $head_commit -ne $target_commit) {
            "::warning::will set tag to the non-HEAD commit (HEAD: ${head_commit}, release: ${target_commit})"

            # fetch all log to refer the target commit
            git fetch --unshallow --progress --no-tags
          }
        }
        else {
          "::warning::could not get merge commit, refers HEAD instead"

          $target_commit = $head_commit
        }

        $release_tag_options = @(
          '--annotate',
          '--message', $tag_message,
          $tag_name,
          $target_commit
        )

        "git tag ${release_tag_options}"
        git tag $release_tag_options

        if (-not $dry_run) {
          git push origin $tag_name
        }

    - name: Delete release target tag ${{ steps.release-info.outputs.package_target_tag }}
      if: ${{ !inputs.dry_run }}
      run: git push origin --delete '${{ steps.release-info.outputs.package_target_tag }}' || true

    - name: Close release working branch ${{ steps.release-info.outputs.release_working_branch }}
      if: ${{ !inputs.dry_run }}
      run: git push origin --delete '${{ steps.release-info.outputs.release_working_branch }}' || true

  publish-release:
    name: Publish release for '${{ needs.publish-release-target.outputs.release_tag }}'
    uses: smdn/Smdn.Fundamentals/.github/workflows/publish-release.yml@workflows/release-target-v1.10.0
    needs: publish-release-target
    with:
      workflow_runs_on:             ${{ inputs.workflow_runs_on }}
      release_tag:                  ${{ needs.publish-release-target.outputs.release_tag }}
      release_note_url:             ${{ needs.publish-release-target.outputs.release_note_url }}
      release_prerelease:           ${{ needs.publish-release-target.outputs.release_prerelease == 'true' || needs.publish-release-target.outputs.release_prerelease == 'True' }}
      release_draft:                ${{ needs.publish-release-target.outputs.release_draft == 'true' || needs.publish-release-target.outputs.release_draft == 'True' }}
      package_id:                   ${{ needs.publish-release-target.outputs.package_id }}
      package_version:              ${{ needs.publish-release-target.outputs.package_version }}
      package_branch:               ${{ needs.publish-release-target.outputs.package_branch }}
      package_prevver_tag:          ${{ needs.publish-release-target.outputs.package_prevver_tag }}
      package_available_nuget_org:  ${{ needs.publish-release-target.outputs.package_available_nuget_org == 'true' || needs.publish-release-target.outputs.package_available_nuget_org == 'True' }}
      dry_run:                      ${{ inputs.dry_run }}
    secrets:
      token_gist:                   ${{ secrets.token_repo }}
      token_new_release:            ${{ secrets.token_repo }}
