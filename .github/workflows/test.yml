# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: "2022 smdn <smdn@smdn.jp>"

name: Run tests (reusable workflow)

permissions:
  contents: read

# ref: https://docs.microsoft.com/en-us/dotnet/devops/dotnet-test-github-action
on:
  workflow_call:
    inputs:
      project:
        description: "The project name to run the test."
        required: false
        type: string

      os:
        description: "The OS label which run the test on. (ubuntu-24.04, ubuntu-22.04, windows-latest, macos-latest, etc.)"
        required: false
        type: string

      dotnet_sdk_version:
        description: "The minimum .NET SDK version which is used to run tests."
        required: false
        type: string
        default: '8.0.100'

      path_prefix_tests:
        description: "The common prefix of the path to test projects' root directory based on the repository root."
        required: false
        type: string
        default: "tests/"

      path_prefix_source:
        description: "The common prefix of the path to source directory based on the repository root."
        required: false
        type: string
        default: "src/"

      path_proj_install_project_assets:
        description: "The path to the .NET project file that will install the project assets and/or the dependencies required for the build."
        required: false
        type: string
        default: "eng/InstallProjectAssets.proj"

      timeout_minutes_test_job:
        description: "The timeout minutes for each test jobs."
        required: false
        type: number
        default: 10

      timeout_hang:
        description: "The value to be set to option `--blame-hang-timeout`. (example: `[{'OS':'Windows','Timeout':'5min'},{'OS':'','Timeout':'3min'}]`)"
        required: false
        type: string
        default: ''

      timeout_vstest_connection:
        description: "The value to be set to VSTEST_CONNECTION_TIMEOUT. (example: `[{'OS':'Windows','Timeout':180},{'OS':'','Timeout':60}]`)"
        required: false
        type: string
        default: ''

      extra_options_common:
        description: "The common extra options to be set on running the `dotnet restore/build/test` command."
        required: false
        type: string
        default: ''

      dotnet_build_options_enable_concurrent_build:
        description: "If false, disables concurrent project build."
        required: false
        type: boolean
        default: true

      dotnet_test_options_verbosity_level:
        description: "The argument to be set to the `--verbosity <LEVEL>` option of the `dotnet test` command. <LEVEL> := q[uiet], m[inimal], n[ormal], d[etailed], diag[nostic]"
        required: false
        type: string
        default: ''

      dotnet_test_options_framework:
        description: "The argument to be set to the `--framework <FRAMEWORK>` option of the `dotnet test` command."
        required: false
        type: string
        default: ''

      dotnet_test_options_filter_expression:
        description: "The argument to be set to the `--filter <EXPRESSION>` option of the `dotnet test` command."
        required: false
        type: string
        default: ''

      verbose:
        description: "If true, enables verbose output."
        required: false
        type: boolean
        default: false

    secrets:
      token_repo:
        description: 'The token which is used to checkout code.'
        required: true

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  MSBUILDTERMINALLOGGER: off

jobs:
  setup:
    name: Set up
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      runs-ons: ${{ steps.runs-on-os-list.outputs.runs-ons }}
      test-projects: ${{ steps.test-projects.outputs.projects }}
    env:
      RUNS_ON_OS_LIST_DEFAULT: "['ubuntu-latest', 'windows-latest', 'macos-latest']"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.2.2
      with:
        token: ${{ secrets.token_repo }}
        fetch-depth: 1

    - name: Determine OS list which run the tests on
      id: runs-on-os-list
      shell: pwsh
      run: |
        $verbose = '${{ inputs.verbose }}' -ieq 'true'
        $os_list = $Env:RUNS_ON_OS_LIST_DEFAULT | ConvertFrom-Json

        if ( ! [string]::IsNullOrEmpty( '${{ inputs.os }}' ) ) {
          $os_list = "${{ inputs.os }}".Split(",", [System.StringSplitOptions]::TrimEntries -bor [System.StringSplitOptions]::RemoveEmptyEntries)
        }

        '### Test runs on' >> $Env:GITHUB_STEP_SUMMARY
        foreach ($os in $os_list) {
          "- ``${os}``" >> $Env:GITHUB_STEP_SUMMARY
        }

        if ( $verbose ) {
          foreach ($os in $os_list) {
            "::notice::test runs on: ${os}"
          }
        }

        "runs-ons=$($os_list | ConvertTo-Json -Compress)" >> $Env:GITHUB_OUTPUT

    - name: Determine test projects
      id: test-projects
      shell: pwsh
      run: |
        $verbose = '${{ inputs.verbose }}' -ieq 'true'
        $directory_tests = [System.IO.Path]::Join('${{ github.workspace }}', '${{ inputs.path_prefix_tests }}')
        $directory_src   = [System.IO.Path]::Join('${{ github.workspace }}', '${{ inputs.path_prefix_source }}')

        # find all project from directories which contains the file named '*.Tests.csproj'
        $projects = Get-ChildItem -Path "${directory_tests}/*/*.Tests.csproj" -File | `
          select `
            @{
              Name = 'Name'
              Expression = {$_.Directory.Name}
            },
            @{
              Name = 'PathToTestProject'
              Expression = {[System.IO.Path]::GetRelativePath('${{ github.workspace }}', $_.FullName)}
            }

        if ( ! [string]::IsNullOrEmpty( '${{ inputs.project }}' ) ) {
          $projects = $projects | where Name -eq '${{ inputs.project }}'
        }

        '### Test target project'   >> $Env:GITHUB_STEP_SUMMARY
        ''                          >> $Env:GITHUB_STEP_SUMMARY
        '|Name|Project path|'       >> $Env:GITHUB_STEP_SUMMARY
        '|----|------------|'       >> $Env:GITHUB_STEP_SUMMARY

        foreach ($proj in $projects) {
          # find test target project
          $test_target_proj = Get-ChildItem -Path "${directory_src}/$($proj.'Name')/$($proj.'Name').csproj" -File | select -First 1

          if ( $test_target_proj ) {
            $proj | Add-Member `
              -MemberType NoteProperty `
              -Name 'PathToTestTargetProject' `
              -Value "$([System.IO.Path]::GetRelativePath('${{ github.workspace }}', $test_target_proj.FullName))"
          }

          "|``$($proj.'Name')``|``$($proj.'PathToTestProject')``|" >> $Env:GITHUB_STEP_SUMMARY

          if ( $verbose ) {
            "::notice::test project: $($proj.'Name') ($($proj.'PathToTestProject'))"
          }
        }

        $output_json = $projects | ConvertTo-Json -Compress
        $output_json

        "projects=${output_json}" >> $Env:GITHUB_OUTPUT

  env-info:
    name: Environment information of ${{ matrix.os }}
    needs: [setup]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 3
    strategy:
      fail-fast: false
      matrix:
        os:
          - ${{ fromJson(needs.setup.outputs.runs-ons) }}

    steps:
    - name: .NET info
      shell: pwsh
      run: |
        '<details>'                     >> $Env:GITHUB_STEP_SUMMARY
        '<summary>.NET info</summary>'  >> $Env:GITHUB_STEP_SUMMARY
        '<pre><code>'                   >> $Env:GITHUB_STEP_SUMMARY
        dotnet --info                   >> $Env:GITHUB_STEP_SUMMARY
        '</code></pre>'                 >> $Env:GITHUB_STEP_SUMMARY
        '</details>'                    >> $Env:GITHUB_STEP_SUMMARY

        '<details>'                               >> $Env:GITHUB_STEP_SUMMARY
        '<summary>RuntimeInformation</summary>'   >> $Env:GITHUB_STEP_SUMMARY
        ''                                        >> $Env:GITHUB_STEP_SUMMARY
        '- `RuntimeInformation.OSArchitecture`: '       + [System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture       >> $Env:GITHUB_STEP_SUMMARY
        '- `RuntimeInformation.OSDescription`: '        + [System.Runtime.InteropServices.RuntimeInformation]::OSDescription        >> $Env:GITHUB_STEP_SUMMARY
        '- `RuntimeInformation.ProcessArchitecture`: '  + [System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture  >> $Env:GITHUB_STEP_SUMMARY
        '- `RuntimeInformation.RuntimeIdentifier`: '    + [System.Runtime.InteropServices.RuntimeInformation]::RuntimeIdentifier    >> $Env:GITHUB_STEP_SUMMARY
        '</details>'                              >> $Env:GITHUB_STEP_SUMMARY

  run-tests:
    name: Test ${{ matrix.project.Name }} on ${{ matrix.os }}
    needs: [setup]
    timeout-minutes: ${{ fromJson(inputs.timeout_minutes_test_job) }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ${{ fromJson(needs.setup.outputs.runs-ons) }}
        project:
          - ${{ fromJson(needs.setup.outputs.test-projects) }}

    steps:
    - name: Check .NET SDK ${{ inputs.dotnet_sdk_version }} is installed
      id: dotnet-sdk-version
      shell: pwsh
      run: |
        $installed_version = [System.Version]::Parse($(dotnet --version))
        $required_version  = [System.Version]::Parse('${{ inputs.dotnet_sdk_version }}')

        if ( $required_version -gt $installed_version ) {
          # required SDK version is not installed
          "::notice::.NET SDK version: installed ${installed_version}, required ${required_version}"

          "install-dotnet-sdk-version=${required_version}" >> $Env:GITHUB_OUTPUT
        }

    - name: Install .NET SDK ${{ steps.dotnet-sdk-version.outputs.install-dotnet-sdk-version }}
      if: ${{ steps.dotnet-sdk-version.outputs.install-dotnet-sdk-version != '' }}
      uses: actions/setup-dotnet@v4.3.0
      with:
        dotnet-version: '${{ steps.dotnet-sdk-version.outputs.install-dotnet-sdk-version }}'

    - name: Checkout repository
      uses: actions/checkout@v4.2.2
      with:
        token: ${{ secrets.token_repo }}
        fetch-depth: 1

    - name: Set NUGET_PACKAGES
      id: set-nuget-packages
      shell: pwsh
      run: |
        $verbose = '${{ inputs.verbose }}' -ieq 'true'
        $path_to_nuget_packages =[System.IO.Path]::Combine(
          '${{ github.workspace }}',
          '.nuget',
          'packages'
        )

        if ( $verbose ) {
          "::notice::NUGET_PACKAGES=${path_to_nuget_packages}"
        }

        $cache_key_suffix = [System.String]::Concat(
          $([System.Globalization.ISOWeek]::GetYear([System.DateTime]::Now)),
          '-W',
          $([System.Globalization.ISOWeek]::GetWeekOfYear([System.DateTime]::Now))
        )

        "NUGET_PACKAGES=${path_to_nuget_packages}" >> $Env:GITHUB_ENV
        "path-to-nuget-packages=${path_to_nuget_packages}" >> $Env:GITHUB_OUTPUT
        "cache-key-suffix=${cache_key_suffix}" >> $Env:GITHUB_OUTPUT

    - name: Setup NuGet cache
      # ref: https://github.com/actions/cache/blob/master/examples.md#c---nuget
      uses: actions/cache@v4.2.2
      env:
        SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5
      with:
        path: ${{ steps.set-nuget-packages.outputs.path-to-nuget-packages }}
        key: test-NuGetPackages-${{ matrix.os }}-${{ steps.set-nuget-packages.outputs.cache-key-suffix }}
        restore-keys: test-NuGetPackages-${{ matrix.os }}

    - name: Restore dependencies of ${{ matrix.project.Name }}
      shell: pwsh
      run: |
        # workaround for error on `dotnet restore`; The process cannot access the file '/home/runner/.nuget/NuGet/nugetorgadd.trk'
        # remove when https://github.com/NuGet/Home/issues/11607 is fixed
        # ref: https://github.com/EventStore/EventStore-Client-Dotnet/pull/201
        dotnet nuget list source

        $path_to_proj_install_assets = [System.IO.Path]::Join(
          '${{ github.workspace }}',
          '${{ inputs.path_proj_install_project_assets }}'
        )

        # install project assets and/or dependencies first
        if (Test-Path -Path $path_to_proj_install_assets -PathType Leaf) {
          dotnet restore `
            --nologo `
            ${{ inputs.extra_options_common }} `
            $path_to_proj_install_assets
        }
        else {
          # note: restore the test target project first due to dependencies such as build assets (Smdn.MSBuild.ProjectAssets.*) have to be installed and restored
          dotnet restore `
            --nologo `
            --no-dependencies `
            ${{ inputs.extra_options_common }} `
            ${{ matrix.project.PathToTestTargetProject }}
        }

        # then restore the test project and its dependencies
        dotnet restore `
          --nologo `
          ${{ inputs.extra_options_common }} `
          ${{ matrix.project.PathToTestProject }}

    - name: Build test project ${{ matrix.project.Name }}
      shell: pwsh
      run: |
        # build the options for `dotnet build`
        $dotnet_build_options = @(
          '--nologo',
          '--no-restore',
          '-consoleLoggerParameters:NoSummary'
        )

        if ( '${{ inputs.dotnet_build_options_enable_concurrent_build }}' -ine 'true' ) {
          # set '-maxCpuCount:1' to disable concurrent build
          # used as the workaround for 'error MSB4018: The "GenerateDepsFile" task failed unexpectedly'
          # ref: https://github.com/dotnet/sdk/issues/2902
          $dotnet_build_options += @('-maxCpuCount:1')
        }

        if ( ! [string]::IsNullOrEmpty( '${{ inputs.dotnet_test_options_framework }}' ) ) {
          $dotnet_build_options += @(
            '--framework', '${{ inputs.dotnet_test_options_framework }}'
          )
        }

        if ( ! [string]::IsNullOrEmpty( '${{ inputs.extra_options_common }}' ) ) {
          $dotnet_build_options += @( '${{ inputs.extra_options_common }}' )
        }

        $dotnet_build_options += @( '${{ matrix.project.PathToTestProject }}' )

        "dotnet build ${dotnet_build_options}"
        dotnet build @dotnet_build_options

    - name: Determine test timeout values
      id: test-timeouts
      shell: pwsh
      env:
        TIMEOUT_HANG:               ${{ inputs.timeout_hang }}
        TIMEOUT_VSTEST_CONNECTION:  ${{ inputs.timeout_vstest_connection }}
      run: |
        $timeout_hang = $Env:TIMEOUT_HANG | `
          ConvertFrom-Json | `
          where { ($_.OS -ieq '${{ runner.os }}') -or [string]::IsNullOrEmpty($_.OS) } | `
          select -ExpandProperty Timeout -First 1

        $timeout_vstest_connection = $Env:TIMEOUT_VSTEST_CONNECTION | `
          ConvertFrom-Json | `
          where { ($_.OS -ieq '${{ runner.os }}') -or [string]::IsNullOrEmpty($_.OS) } | `
          select -ExpandProperty Timeout -First 1

        # set fallback value
        $timeout_hang ??= '3minutes'
        $timeout_vstest_connection ??= 90

        # set output
        "timeout_hang=${timeout_hang}" >> $Env:GITHUB_OUTPUT
        "timeout_vstest_connection=${timeout_vstest_connection}" >> $Env:GITHUB_OUTPUT

    - name: Test ${{ matrix.project.Name }}
      shell: pwsh
      env:
        VSTEST_CONNECTION_TIMEOUT: ${{ steps.test-timeouts.outputs.timeout_vstest_connection }}
      run: |
        # workaround for the vstest issue (https://github.com/microsoft/vstest/issues/4014)
        cd $([System.IO.Path]::GetDirectoryName('${{ matrix.project.PathToTestProject }}'))

        $option_verbosity_level = '${{ inputs.dotnet_test_options_verbosity_level }}'

        if ([string]::IsNullOrEmpty($option_verbosity_level)) {
          $option_verbosity_level = 'quiet' # default verbosity level
        }

        # build the options for `dotnet test`
        $dotnet_test_options = @(
          '--nologo',
          '--no-restore',
          '--no-build',
          '--verbosity', $option_verbosity_level,
          '--blame-hang-timeout', '${{ steps.test-timeouts.outputs.timeout_hang }}'
        )

        if ( ! [string]::IsNullOrEmpty( '${{ inputs.dotnet_test_options_framework }}' ) ) {
          $dotnet_test_options += @(
            '--framework', '${{ inputs.dotnet_test_options_framework }}'
          )
        }

        if ( ! [string]::IsNullOrEmpty( '${{ inputs.dotnet_test_options_filter_expression }}' ) ) {
          $dotnet_test_options += @(
            '--filter', '${{ inputs.dotnet_test_options_filter_expression }}'
          )
        }

        if ( ! [string]::IsNullOrEmpty( '${{ inputs.extra_options_common }}' ) ) {
          $dotnet_test_options += @( '${{ inputs.extra_options_common }}' )
        }

        "dotnet test ${dotnet_test_options}"
        dotnet test @dotnet_test_options
