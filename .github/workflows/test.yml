# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: "2022 smdn <smdn@smdn.jp>"

name: Run tests (reusable workflow)

# ref: https://docs.microsoft.com/en-us/dotnet/devops/dotnet-test-github-action
on:
  workflow_call:
    inputs:
      project:
        description: "The project name to run the test."
        required: false
        type: string

      os:
        description: "The OS label which run the test on. (ex: ubuntu-22.04, ubuntu-20.04, windows-latest, macos-latest)"
        required: false
        type: string

      dotnet_sdk_version:
        description: "The minimum .NET SDK version which is used to run tests."
        required: false
        type: string
        default: '6.0.200'

      path_prefix_tests:
        description: "The common prefix of the path to test projects' root directory based on the repository root."
        required: false
        type: string
        default: "tests/"

      path_prefix_source:
        description: "The common prefix of the path to source directory based on the repository root."
        required: false
        type: string
        default: "src/"

      timeout_hang:
        description: "The value to be set to option `--blame-hang-timeout`. (ex: `[{'OS':'Windows','Timeout':'5min'},{'OS':'','Timeout':'3min'}]`)"
        required: false
        type: string
        default: ''

      timeout_vstest_connection:
        description: "The value to be set to VSTEST_CONNECTION_TIMEOUT. (ex: `[{'OS':'Windows','Timeout':180},{'OS':'','Timeout':60}]`)"
        required: false
        type: string
        default: ''

      extra_options_common:
        description: "The common extra options to be set on running the `dotnet restore/build/test` command."
        required: false
        type: string
        default: ''

      verbose:
        description: "If true, enables verbose output."
        required: false
        type: boolean
        default: false

    secrets:
      token_repo:
        description: 'The token which is used to checkout code.'
        required: true

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true

jobs:
  setup:
    name: Set up
    runs-on: ubuntu-latest
    outputs:
      runs-ons: ${{ steps.runs-on-os-list.outputs.runs-ons }}
      test-projects: ${{ steps.test-projects.outputs.projects }}
    env:
      RUNS_ON_OS_LIST_DEFAULT: "['ubuntu-latest', 'windows-latest', 'macos-latest']"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3.1.0
      with:
        token: ${{ secrets.token_repo }}

    - name: Determine OS list which run the tests on
      id: runs-on-os-list
      shell: pwsh
      run: |
        $verbose = '${{ inputs.verbose }}' -ieq 'true'
        $os_list = $Env:RUNS_ON_OS_LIST_DEFAULT | ConvertFrom-Json

        if ( ! [string]::IsNullOrEmpty( '${{ inputs.os }}' ) ) {
          $os_list = "${{ inputs.os }}".Split(",", [System.StringSplitOptions]::TrimEntries -bor [System.StringSplitOptions]::RemoveEmptyEntries)
        }

        if ( $verbose ) {
          foreach ($os in $os_list) {
            "::notice::test runs on: ${os}"
          }
        }

        "runs-ons=$($os_list | ConvertTo-Json -Compress)" >> $Env:GITHUB_OUTPUT

    - name: Determine test projects
      id: test-projects
      shell: pwsh
      run: |
        $verbose = '${{ inputs.verbose }}' -ieq 'true'
        $directory_tests = [System.IO.Path]::Join('${{ github.workspace }}', '${{ inputs.path_prefix_tests }}')
        $directory_src   = [System.IO.Path]::Join('${{ github.workspace }}', '${{ inputs.path_prefix_source }}')

        # find all project from directories which contains the file named '*.Tests.csproj'
        $projects = Get-ChildItem -Path "${directory_tests}/*/*.Tests.csproj" -File | `
          select `
            @{
              Name = 'Name'
              Expression = {$_.Directory.Name}
            },
            @{
              Name = 'PathToTestProject'
              Expression = {[System.IO.Path]::GetRelativePath('${{ github.workspace }}', $_.FullName)}
            }

        if ( ! [string]::IsNullOrEmpty( '${{ inputs.project }}' ) ) {
          $projects = $projects | where Name -eq '${{ inputs.project }}'
        }

        foreach ($proj in $projects) {
          # find test target project
          $test_target_proj = Get-ChildItem -Path "${directory_src}/$($proj.'Name')/$($proj.'Name').csproj" -File | select -First 1

          if ( $test_target_proj ) {
            $proj | Add-Member `
              -MemberType NoteProperty `
              -Name 'PathToTestTargetProject' `
              -Value "$([System.IO.Path]::GetRelativePath('${{ github.workspace }}', $test_target_proj.FullName))"
          }

          if ( $verbose ) {
            "::notice::test project: $($proj.'Name') ($($proj.'PathToTestProject'))"
          }
        }

        $output_json = $projects | ConvertTo-Json -Compress
        $output_json

        "projects=${output_json}" >> $Env:GITHUB_OUTPUT

  env-info:
    name: Environment information of ${{ matrix.os }}
    needs: [setup]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ${{ fromJson(needs.setup.outputs.runs-ons) }}

    steps:
    - name: .NET info
      run: dotnet --info

  run-tests:
    name: Test ${{ matrix.project.Name }} on ${{ matrix.os }}
    needs: [setup]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ${{ fromJson(needs.setup.outputs.runs-ons) }}
        project:
          - ${{ fromJson(needs.setup.outputs.test-projects) }}

    steps:
    - name: Check .NET SDK version
      id: dotnet-sdk-version
      shell: pwsh
      run: |
        $installed_version = [System.Version]::Parse($(dotnet --version))
        $required_version  = [System.Version]::Parse('${{ inputs.dotnet_sdk_version }}')

        if ( $required_version -gt $installed_version ) {
          # required SDK version is not installed
          "::notice::.NET SDK version: installed ${installed_version}, required ${required_version}"

          "install=${required_version}" >> $Env:GITHUB_OUTPUT
        }

    - name: Install .NET SDK ${{ steps.dotnet-sdk-version.outputs.install }}
      if: ${{ steps.dotnet-sdk-version.outputs.install != '' }}
      uses: actions/setup-dotnet@v2.0.0
      with:
        dotnet-version: '${{ steps.dotnet-sdk-version.outputs.install }}'

    - name: Checkout repository
      uses: actions/checkout@v3.1.0
      with:
        token: ${{ secrets.token_repo }}

    - name: Set NUGET_PACKAGES
      shell: pwsh
      run: |
        $verbose = '${{ inputs.verbose }}' -ieq 'true'
        $dir_nuget_packages =[System.IO.Path]::Combine(
          '${{ github.workspace }}',
          '.nuget',
          'packages'
        )

        if ( $verbose ) {
          "::notice::NUGET_PACKAGES=${dir_nuget_packages}"
        }

        "NUGET_PACKAGES=${dir_nuget_packages}" >> $Env:GITHUB_ENV

    - name: Setup NuGet cache
      # ref: https://github.com/actions/cache/blob/master/examples.md#c---nuget
      uses: actions/cache@v3.0.11
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies of ${{ matrix.project.Name }}
      shell: pwsh
      run: |
        # workaround for error on `dotnet restore`; The process cannot access the file '/home/runner/.nuget/NuGet/nugetorgadd.trk'
        # remove when https://github.com/NuGet/Home/issues/11607 is fixed
        # ref: https://github.com/EventStore/EventStore-Client-Dotnet/pull/201
        dotnet nuget list source

        # note: restore the test target project first due to dependencies such as build assets (Smdn.MSBuild.ProjectAssets.*) have to be installed and restored
        dotnet restore `
          --nologo `
          --no-dependencies `
          ${{ inputs.extra_options_common }} `
          ${{ matrix.project.PathToTestTargetProject }}

        # then restore the test project and its dependencies
        dotnet restore `
          --nologo `
          ${{ inputs.extra_options_common }} `
          ${{ matrix.project.PathToTestProject }}

    - name: Build test project ${{ matrix.project.Name }}
      shell: pwsh
      run: |
        dotnet build `
          --nologo `
          --no-restore `
          -consoleLoggerParameters:NoSummary `
          ${{ inputs.extra_options_common }} `
          ${{ matrix.project.PathToTestProject }}

    - name: Determine test timeout values
      id: test-timeouts
      shell: pwsh
      env:
        TIMEOUT_HANG:               ${{ inputs.timeout_hang }}
        TIMEOUT_VSTEST_CONNECTION:  ${{ inputs.timeout_vstest_connection }}
      run: |
        $timeout_hang = $Env:TIMEOUT_HANG | `
          ConvertFrom-Json | `
          where { ($_.OS -ieq '${{ runner.os }}') -or [string]::IsNullOrEmpty($_.OS) } | `
          select -ExpandProperty Timeout -First 1

        $timeout_vstest_connection = $Env:TIMEOUT_VSTEST_CONNECTION | `
          ConvertFrom-Json | `
          where { ($_.OS -ieq '${{ runner.os }}') -or [string]::IsNullOrEmpty($_.OS) } | `
          select -ExpandProperty Timeout -First 1

        # set fallback value
        $timeout_hang ??= '3minutes'
        $timeout_vstest_connection ??= 90

        # set output
        "timeout_hang=${timeout_hang}" >> $Env:GITHUB_OUTPUT
        "timeout_vstest_connection=${timeout_vstest_connection}" >> $Env:GITHUB_OUTPUT

    - name: Test ${{ matrix.project.Name }}
      shell: pwsh
      env:
        VSTEST_CONNECTION_TIMEOUT: ${{ steps.test-timeouts.outputs.timeout_vstest_connection }}
      run: |
        # workaround for the vstest issue (https://github.com/microsoft/vstest/issues/4014)
        cd $([System.IO.Path]::GetDirectoryName('${{ matrix.project.PathToTestProject }}'))

        dotnet test `
          --nologo `
          --no-restore `
          --no-build `
          --verbosity quiet `
          --blame-hang-timeout '${{ steps.test-timeouts.outputs.timeout_hang }}' `
          ${{ inputs.extra_options_common }}
