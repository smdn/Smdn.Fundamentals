# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: "2022 smdn <smdn@smdn.jp>"

name: Publish release (reusable workflow)
run-name: Publish release for '${{ inputs.release_tag }}'

permissions:
  contents: write

on:
  workflow_call:
    inputs:
      workflow_runs_on:
        description: "The OS label which run the workflow on. (ubuntu-latest, ubuntu-24.04, ubuntu-22.04, etc.)"
        required: false
        type: string
        default: "ubuntu-latest"

      release_tag:
        description: "The name of the tag for the release to be created."
        required: true
        type: string

      release_note_url:
        description: "The URL of Gist where the release note for the package has been published."
        required: true
        type: string

      release_prerelease:
        description: "The boolean value that indicates whether the release should be published as a prerelease or not."
        required: false
        type: boolean
        default: false

      release_draft:
        description: "The boolean value that indicates whether the release should be published as a draft or not."
        required: false
        type: boolean
        default: false

      package_id:
        description: "The ID of the released package."
        required: true
        type: string

      package_version:
        description: "The version of the released package in SemVer format."
        required: true
        type: string

      package_branch:
        description: "The name of the branch from which the released package was generated."
        required: true
        type: string

      package_prevver_tag:
        description: "The name of the tag that identifies the previous version of the released package."
        required: false
        type: string
        default: ''

      package_available_nuget_org:
        description: "The boolean value that indicates whether the released package has been pushed to NuGet.org or not."
        required: false
        type: boolean
        default: false

      dry_run:
        description: "If true, performs a trial run."
        required: false
        type: boolean
        default: false

    secrets:
      token_gist:
        description: 'The token which is used to view release note files from Gist.'
        required: true

      token_new_release:
        description: 'The token which is used to publish a new release.'
        required: true

jobs:
  publish-release:
    runs-on: ${{ inputs.workflow_runs_on }}

    steps:
    - name: Create release note files for ${{ inputs.release_tag }}
      id: release-notes-file
      env:
        GH_TOKEN: ${{ secrets.token_gist }}
      shell: pwsh
      run: |
        $dry_run = '${{ inputs.dry_run }}' -ieq 'true'

        # note: the maximum size of the release body seems to be 125,000 characters (textarea#release_body@data-input-max-length="125000")
        $release_notes_body_max_length = 125000
        $release_notes_body = New-Object System.Text.StringBuilder -ArgumentList 10240
        $release_notes_output_path = [System.IO.Path]::GetFullPath('releasenotes.md')

        if ( '${{ inputs.package_available_nuget_org }}' -ieq 'true' -Or $dry_run ) {
          [void]$release_notes_body.AppendLine('# Released package')
          [void]$release_notes_body.AppendFormat(
            '- NuGet [{0} version {1}](https://www.nuget.org/packages/{0}/{1})',
            '${{ inputs.package_id }}',
            '${{ inputs.package_version }}'
          ).AppendLine()
          [void]$release_notes_body.AppendLine()
        }

        #
        # Downloads release note files from gist and attempts to append them to release notes.
        # If the body exceeds the maximum length when appended, will cancel appending.
        #
        [void]$release_notes_body.AppendLine('# Release notes')
        [void]$release_notes_body.AppendLine('The [full release notes](${{ inputs.release_note_url }}) are available at gist.')
        [void]$release_notes_body.AppendLine()

        $release_note_sections = @(
          [PSCustomObject]@{
            FileNameSuffix = '.changelog.md'
            Title = 'Change log'
            Header = $([String]::Join(
              "`n",
              @(
                '<details>'
                '<summary>Change log in this release:</summary>'
                '<div>'
                ''
              )
            ))
            Footer = $([String]::Join(
              "`n",
              @(
                ''
                '</div>'
                '</details>'
              )
            ))
          }
          [PSCustomObject]@{
            FileNameSuffix = '.api-changes.diff'
            Title = 'API changes'
            Header = $([String]::Join(
              "`n",
              @(
                '<details>'
                '<summary>API changes in this release:</summary>'
                '<div>'
                ''
                '```diff'
              )
            ))
            Footer = $([String]::Join(
              "`n",
              @(
                '```'
                ''
                '</div>'
                '</details>'
              )
            ))
          }
          [PSCustomObject]@{
            FileNameSuffix = '.full-changes.diff'
            Title = 'Full changes'
            Header = $([String]::Join(
              "`n",
              @(
                '<details>'
                '<summary>Full changes in this release:</summary>'
                '<div>'
                ''
                '```diff'
              )
            ))
            Footer = $([String]::Join(
              "`n",
              @(
                '```'
                ''
                '</div>'
                '</details>'
              )
            ))
          }
        )

        # list release note files from gist
        $release_note_files = gh gist view `
          '${{ inputs.release_note_url }}' `
          --files

        # download release note files
        foreach ( $section in $release_note_sections ) {
          $release_note_file = $release_note_files |
            where { $_.StartsWith('releasenote.') -And $_.EndsWith($section.FileNameSuffix) } |
            select -First 1

          if ( ! $release_note_file ) {
            continue
          }

          $release_note_content = gh gist view `
            '${{ inputs.release_note_url }}' `
            --raw `
            --filename $release_note_file

          $section
            | Add-Member `
            -MemberType NoteProperty `
            -Name 'Content' `
            -Value $release_note_content
        }

        # construct release note section
        foreach ( $section in $release_note_sections ) {
          if ( [string]::IsNullOrEmpty( $section.Content ) ) {
            continue
          }

          $section_body = New-Object System.Text.StringBuilder -ArgumentList 10240

          [void]$section_body.AppendLine("## $($section.Title)")
          [void]$section_body.AppendLine($section.Header)
          [void]$section_body.AppendLine($section.Content -join "`n")
          [void]$section_body.AppendLine($section.Footer)
          [void]$section_body.AppendLine()

          # attempt to append constructed section
          if ( $release_notes_body_max_length -lt $release_notes_body.Length + $section_body.Length ) {
            break;
          }

          [void]$release_notes_body.Append($section_body.ToString())
        }

        # append release notes content for a release
        # ref: https://docs.github.com/ja/rest/releases/releases#generate-release-notes-content-for-a-release
        $release_api_generate_notes_options = @(
          '--method', 'POST',
          '-H', 'Accept: application/vnd.github+json',
          '/repos/${{ github.repository }}/releases/generate-notes',
          '-f', 'tag_name=${{ inputs.release_tag }}',
          '-f', 'target_commitish=${{ inputs.package_branch }}'
        )

        $package_prevver_tag = '${{ inputs.package_prevver_tag }}'

        if ( $package_prevver_tag ) {
          $release_api_generate_notes_options += @(
            '-f', 'previous_tag_name=${{ inputs.package_prevver_tag }}'
          )
        }

        "gh api ${release_api_generate_notes_options}"

        $generated_release_notes = $(gh api $release_api_generate_notes_options) `
          | ConvertFrom-Json

        [void]$release_notes_body.AppendLine("## Notes")
        [void]$release_notes_body.AppendLine($generated_release_notes.body)

        # write release notes file
        if (-not $dry_run) {
          Out-File -FilePath $release_notes_output_path -Encoding utf8 -InputObject $release_notes_body.ToString()

          "release notes file written: '${release_notes_output_path}', $($([System.IO.FileInfo] $release_notes_output_path).Length) bytes"
        }

        "## :page_with_curl: Release notes" >> $Env:GITHUB_STEP_SUMMARY
        "Created release notes file (total $($release_notes_body.Length) characters)." >> $Env:GITHUB_STEP_SUMMARY
        ''      >> $Env:GITHUB_STEP_SUMMARY
        '-----' >> $Env:GITHUB_STEP_SUMMARY
        ''      >> $Env:GITHUB_STEP_SUMMARY
        [System.Text.RegularExpressions.Regex]::Replace(
          $release_notes_body.ToString(),
          '^#',
          '###',
          [System.Text.RegularExpressions.RegexOptions]::MultiLine
        ) >> $Env:GITHUB_STEP_SUMMARY
        ''      >> $Env:GITHUB_STEP_SUMMARY
        '-----' >> $Env:GITHUB_STEP_SUMMARY
        ''      >> $Env:GITHUB_STEP_SUMMARY

        # set outputs
        "path=${release_notes_output_path}" >> $Env:GITHUB_OUTPUT

    - name: Publish release for ${{ inputs.release_tag }}
      env:
        GH_TOKEN: ${{ secrets.token_new_release }}
      shell: pwsh
      run: |
        $dry_run = '${{ inputs.dry_run }}' -ieq 'true'

        $release_notes_file = '${{ steps.release-notes-file.outputs.path }}'
        $release_title = '${{ inputs.package_id }} version ${{ inputs.package_version }}'

        "release notes file: '${release_notes_file}', $($([System.IO.FileInfo] $release_notes_file).Length) bytes"

        $release_create_options = @(
          '--repo', '${{ github.repository }}',
          '--title', $release_title,
          '--target', '${{ inputs.package_branch }}',
          '--notes-file', $release_notes_file
        )

        if ( '${{ inputs.release_prerelease }}' -ieq 'true' ) {
          $release_create_options += '--prerelease'
        }
        if ( '${{ inputs.release_draft }}' -ieq 'true' ) {
          $release_create_options += '--draft'
        }

        $release_create_options += '${{ inputs.release_tag }}'

        "gh release create ${release_create_options}"

        if ( $dry_run ) {
          $release_url = '(dry-run)'
        }
        else {
          $release_url = $(gh release create $release_create_options)
        }

        "# :sparkles: Released" >> $Env:GITHUB_STEP_SUMMARY
        "Created release: [${release_title}](${release_url})" >> $Env:GITHUB_STEP_SUMMARY
