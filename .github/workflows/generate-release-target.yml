# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: "2022 smdn <smdn@smdn.jp>"

name: Generate release target (reusable workflow)
run-name: Generate release target for ${{ inputs.release_target_tag_name }}

permissions:
  contents: write
  pull-requests: write

on:
  workflow_call:
    inputs:
      release_target_tag_name:
        description: "The tag name of the release target."
        required: true
        type: string

      release_target_tag_prefix:
        description: "The common prefix of the release target tag name."
        required: false
        type: string
        default: "new-release/"

      release_target_pr_label:
        description: "The label to set for the pull request of the release target"
        required: false
        type: string
        default: "release-target"

      release_tag_prefix:
        description: "The common prefix of the release tag name."
        required: false
        type: string
        default: "releases/"

      path_prefix_source:
        description: "The common prefix of the path to source directory of the release target based on the repository root."
        required: false
        type: string
        default: "src/"

      path_prefix_apilist:
        description: "The common prefix of the path to API list directory of the release target based on the repository root."
        required: false
        type: string
        default: "doc/api-list/"

      workflow_runs_on:
        description: "The OS label which run the workflow on. (ubuntu-latest, ubuntu-24.04, ubuntu-22.04, etc.)"
        required: false
        type: string
        default: "ubuntu-latest"

      dotnet_sdk_version:
        description: "The minimum .NET SDK version which is used to generate the release target."
        required: false
        type: string
        default: '6.0.200'

      dry_run:
        description: "If true, performs a trial run."
        required: false
        type: boolean
        default: false

    secrets:
      token_repo:
        description: 'The token which is used to checkout code.'
        required: true

      token_pullrequest:
        description: 'The token which is used to open a pull request for the new release.'
        required: true

      token_gist:
        description: 'The token which is used to create release notes onto gist.'
        required: true

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true

jobs:
  generate-release-target:
    runs-on: ${{ inputs.workflow_runs_on }}
    if: startsWith(inputs.release_target_tag_name, inputs.release_target_tag_prefix)

    steps:
    - name: Check .NET SDK ${{ inputs.dotnet_sdk_version }} is installed
      id: dotnet-sdk-version
      shell: pwsh
      run: |
        $installed_version = [System.Version]::Parse($(dotnet --version))
        $required_version  = [System.Version]::Parse('${{ inputs.dotnet_sdk_version }}')

        if ( $required_version -gt $installed_version ) {
          # required SDK version is not installed
          "::notice::.NET SDK version: installed ${installed_version}, required ${required_version}"

          "install-dotnet-sdk-version=${required_version}" >> $Env:GITHUB_OUTPUT
        }

    - name: Install .NET SDK ${{ steps.dotnet-sdk-version.outputs.install-dotnet-sdk-version }}
      if: ${{ steps.dotnet-sdk-version.outputs.install-dotnet-sdk-version != '' }}
      uses: actions/setup-dotnet@v4.3.1
      with:
        dotnet-version: '${{ steps.dotnet-sdk-version.outputs.install-dotnet-sdk-version }}'

    - name: Checkout repository
      uses: actions/checkout@v4.2.2
      with:
        # TODO: attempt treeless clone '--filter=tree:0'
        # ref: https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/
        fetch-depth: 0
        ref: ${{ inputs.release_target_tag_name }}
        token: ${{ secrets.token_repo }}
        persist-credentials: true

    - name: Configure git identity
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com

        # TODO
        # git config user.name '${{ github.repository_owner }}'
        # git config user.email '<>'

    - name: Determine the release target package information
      id: package-info
      # note: Parse and determines parse package info from the triggered tag name.
      # note: The tag name must be in format of '<prefix>/<branch>/Package.ID-1.2.3-prerelease'.
      # note: The tag that ends with '-unreleased' will be treated as an unreleasable target where nupkg will not be uploaded.
      shell: pwsh
      run: |
        $pattern_target_tag = '^{0}{1}{2}\-{3}(\-{4})?$' -f
          '${{ inputs.release_target_tag_prefix }}',
          '(?<branch>[A-Za-z0-9\.\-]+)/',
          '(?<id>[A-Za-z0-9\.]+)',
          '(?<version>[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?([\-\+][0-9a-zA-Z\.]+)?)',
          '(?<suffix>[A-Za-z0-9]+)'

        $package_target_tag = '${{ inputs.release_target_tag_name }}'

        if ("$package_target_tag" -match "$pattern_target_tag") {
          # split package info and version from tag name
          $package_branch = $Matches['branch']
          $package_id = $Matches['id']
          $package_version = $Matches['version']
          $package_id_with_version = '{0}-{1}' -f $package_id, $package_version
          $package_source_dir = '${{ inputs.path_prefix_source }}{0}/' -f $package_id

          if ( -not ( Test-Path -Path $package_source_dir -PathType Container ) ) {
            "::error::The source directory '${package_source_dir}' was not found.  Make sure that the tag name '${package_target_tag}' indicates a package which is present."
            exit 1
          }

          # treat the version ends with '-unreleased' as an unreleasable package
          $package_can_release = $Matches['suffix'] -ne "-unreleased"

          # determine whether the package is 'prerelease' or not
          $package_is_prerelease = $false

          if ($package_can_release) {
            if ("$package_version" -match '\-[0-9a-zA-Z\.]+') {
              $package_is_prerelease = $true
            }
          }
          else {
            $package_is_prerelease = $true
          }

          # notice determined info
          "## Package information" >> $Env:GITHUB_STEP_SUMMARY
          "" >> $Env:GITHUB_STEP_SUMMARY
          "| name | value |" >> $Env:GITHUB_STEP_SUMMARY
          "| ---- | ----- |" >> $Env:GITHUB_STEP_SUMMARY
          "| package_target_tag | ``${package_target_tag}`` |"              >> $Env:GITHUB_STEP_SUMMARY
          "| package_branch | ``${package_branch}`` |"                      >> $Env:GITHUB_STEP_SUMMARY
          "| package_can_release | ``${package_can_release}`` |"            >> $Env:GITHUB_STEP_SUMMARY
          "| package_id | ``${package_id}`` |"                              >> $Env:GITHUB_STEP_SUMMARY
          "| package_id_with_version | ``${package_id_with_version}`` |"    >> $Env:GITHUB_STEP_SUMMARY
          "| package_version | ``${package_version}`` |"                    >> $Env:GITHUB_STEP_SUMMARY
          "| package_is_prerelease | ``${package_is_prerelease}`` |"        >> $Env:GITHUB_STEP_SUMMARY
          "| package_source_dir | ``${package_source_dir}`` |"              >> $Env:GITHUB_STEP_SUMMARY

          # set outputs
          "package_target_tag=${package_target_tag}"            >> $Env:GITHUB_OUTPUT
          "package_branch=${package_branch}"                    >> $Env:GITHUB_OUTPUT
          "package_can_release=${package_can_release}"          >> $Env:GITHUB_OUTPUT
          "package_id=${package_id}"                            >> $Env:GITHUB_OUTPUT
          "package_id_with_version=${package_id_with_version}"  >> $Env:GITHUB_OUTPUT
          "package_version=${package_version}"                  >> $Env:GITHUB_OUTPUT
          "package_is_prerelease=${package_is_prerelease}"      >> $Env:GITHUB_OUTPUT
          "package_source_dir=${package_source_dir}"            >> $Env:GITHUB_OUTPUT
        }
        else {
          "::error::tag name format mismatch: $package_target_tag"
          exit 1
        }

        # find the tag of the previous version
        $package_prevver_ref = git describe --tags --abbrev=0 --match "${{ inputs.release_tag_prefix }}${package_id}-*"

        if ( $package_prevver_ref ) {
          $package_prevver_tag = $package_prevver_ref
        }
        else {
          "::warning::could not find a tag of the previous version (${{ inputs.release_tag_prefix }}${package_id}-*)"
          $package_prevver_tag = $null

          # refer initial commit as previous version instead
          $package_prevver_ref = git rev-list HEAD | tail -1
        }

        # notice determined info
        "| package_prevver_ref | ``${package_prevver_ref}`` |" >> $Env:GITHUB_STEP_SUMMARY
        "| package_prevver_tag | ``${package_prevver_tag}`` |" >> $Env:GITHUB_STEP_SUMMARY

        # set outputs
        "package_prevver_ref=${package_prevver_ref}" >> $Env:GITHUB_OUTPUT
        "package_prevver_tag=${package_prevver_tag}" >> $Env:GITHUB_OUTPUT

    - name: Determine the release info of ${{ steps.package-info.outputs.package_id_with_version }}
      id: release-info
      shell: pwsh
      run: |
        $release_tag = '${{ inputs.release_tag_prefix }}${{ steps.package-info.outputs.package_id_with_version }}'
        $release_working_branch = "${release_tag}-$([DateTimeOffset]::UtcNow.ToUnixTimeSeconds().ToString("D"))"

        # notice determined info
        "## Release information" >> $Env:GITHUB_STEP_SUMMARY
        "" >> $Env:GITHUB_STEP_SUMMARY
        "| name | value |" >> $Env:GITHUB_STEP_SUMMARY
        "| ---- | ----- |" >> $Env:GITHUB_STEP_SUMMARY
        "| tag | ``${release_tag}`` |" >> $Env:GITHUB_STEP_SUMMARY
        "| working_branch | ``${release_working_branch}`` |" >> $Env:GITHUB_STEP_SUMMARY

        # set outputs
        "tag=${release_tag}" >> $Env:GITHUB_OUTPUT
        "working_branch=${release_working_branch}" >> $Env:GITHUB_OUTPUT

    - name: Prepare for updating API list of ${{ steps.package-info.outputs.package_id }}
      run: |
        # delete existing API list files firstly to make the API list of reduced target frameworks removed from the history
        # this must be done before the generation of new API list, i.e. before running the target 'Build' or 'Pack'.
        git rm --ignore-unmatch '${{ inputs.path_prefix_apilist }}${{ steps.package-info.outputs.package_id }}/*.apilist.cs'

    - name: Set NUGET_PACKAGES
      id: set-nuget-packages
      shell: pwsh
      run: |
        $path_to_nuget_packages =[System.IO.Path]::Combine(
          '${{ github.workspace }}',
          '.nuget',
          'packages'
        )

        "::debug::NUGET_PACKAGES=${path_to_nuget_packages}"

        $cache_key_suffix = [System.String]::Concat(
          $([System.Globalization.ISOWeek]::GetYear([System.DateTime]::Now)),
          '-W',
          $([System.Globalization.ISOWeek]::GetWeekOfYear([System.DateTime]::Now))
        )

        "NUGET_PACKAGES=${path_to_nuget_packages}" >> $Env:GITHUB_ENV
        "path-to-nuget-packages=${path_to_nuget_packages}" >> $Env:GITHUB_OUTPUT
        "cache-key-suffix=${cache_key_suffix}" >> $Env:GITHUB_OUTPUT

    - name: Setup NuGet cache
      # ref: https://github.com/actions/cache/blob/master/examples.md#c---nuget
      uses: actions/cache@v4.2.3
      env:
        SEGMENT_DOWNLOAD_TIMEOUT_MINS: 5
      with:
        path: ${{ steps.set-nuget-packages.outputs.path-to-nuget-packages }}
        key: generate-release-NuGetPackages-${{ steps.set-nuget-packages.outputs.cache-key-suffix }}
        restore-keys: generate-release-NuGetPackages

    - name: .NET info
      run: dotnet --info

    - name: Restore dependencies of ${{ steps.package-info.outputs.package_id }}
      shell: pwsh
      run: |
        # workaround for error on `dotnet restore`; The process cannot access the file '/home/runner/.nuget/NuGet/nugetorgadd.trk'
        # remove when https://github.com/NuGet/Home/issues/11607 is fixed
        # ref: https://github.com/EventStore/EventStore-Client-Dotnet/pull/201
        dotnet nuget list source

        dotnet restore `
          --nologo `
          ${{ steps.package-info.outputs.package_source_dir }}

    - name: Build ${{ steps.package-info.outputs.package_id }}
      shell: pwsh
      run: |
        # note: do not specify --no-restore option here since dependencies in build assets (Smdn.MSBuild.ProjectAssets.*) have to be restored
        dotnet build `
          --nologo `
          --configuration Release `
          -consoleLoggerParameters:NoSummary `
          /p:RepositoryBranch=${{ steps.package-info.outputs.package_branch }} `
          ${{ steps.package-info.outputs.package_source_dir }} `
        | Tee-Object -Variable build_log

        # select errors: 'path/to/file(line,col): error XX9999:'
        $build_errors = $build_log | Select-String -Pattern '\: error (?<error>[a-zA-Z0-9]+)\:' -AllMatches

        # select error codes: 'XX9999'
        $build_error_codes = $build_errors.Matches |
          Select-Object -Unique @{
            label='ErrorCode'
            expression={$_.Groups['error'].Value}
          }

        # ignore the build error NETSDK1085; occurs if <NoBuild> is specified in project file.
        if ( 0 -lt ($build_error_codes | Where-Object -Property ErrorCode -NE 'NETSDK1085').Count ) {
          # build error occurred other than NETSDK1085
          "::error::unexpected build errors: $(($build_error_codes | Select-Object -ExpandProperty ErrorCode) -join ', ')"
          exit 1
        }
        elseif ( 0 -lt ($build_error_codes).Count ) {
          "::warning::build errors: $(($build_error_codes | Select-Object -ExpandProperty ErrorCode) -join ', ')"
        }

        exit 0

    - name: Pack ${{ steps.package-info.outputs.package_id }}
      id: pack
      shell: pwsh
      run: |
        dotnet pack `
          --nologo `
          --configuration Release `
          --no-build `
          /p:RepositoryBranch=${{ steps.package-info.outputs.package_branch }} `
          ${{ steps.package-info.outputs.package_source_dir }}

        $file_nupkg  = '${{ steps.package-info.outputs.package_id }}.${{ steps.package-info.outputs.package_version }}.nupkg'
        $file_nuspec = '${{ steps.package-info.outputs.package_id }}.${{ steps.package-info.outputs.package_version }}.nuspec'

        $expected_nupkg  = "${{ steps.package-info.outputs.package_source_dir }}bin/Release/${file_nupkg}"
        $expected_nuspec = "${{ steps.package-info.outputs.package_source_dir }}obj/Release/${file_nuspec}"

        # test generated file
        if (
          ( Test-Path -Path $expected_nupkg  -PathType Leaf ) -and
          ( Test-Path -Path $expected_nuspec -PathType Leaf )
        ) {
          "## :package: nupkg/nuspec" >> $Env:GITHUB_STEP_SUMMARY
          "A package '${expected_nupkg}' was generated successfully." >> $Env:GITHUB_STEP_SUMMARY
          "" >> $Env:GITHUB_STEP_SUMMARY
          '```xml' >> $Env:GITHUB_STEP_SUMMARY
          cat $expected_nuspec >> $Env:GITHUB_STEP_SUMMARY
          '```' >> $Env:GITHUB_STEP_SUMMARY

          # set outputs
          "artifact_name_nupkg=${file_nupkg}" >> $Env:GITHUB_OUTPUT
          "path_nupkg=${expected_nupkg}" >> $Env:GITHUB_OUTPUT
          "path_nuspec=${expected_nuspec}" >> $Env:GITHUB_OUTPUT
        }
        else {
          "::error::'${expected_nupkg}' was not generated. Make sure that the Version/VersionPrefix/VersionSuffix in '${{ steps.package-info.outputs.package_id }}.csproj' are defined correctly."
          exit 1
        }

    - name: Generate .nuspec diff
      id: nuspec-diff
      continue-on-error: true
      shell: pwsh
      run: |
        $path_nuspec_diff = [System.IO.Path]::GetFullPath('${{ steps.pack.outputs.path_nuspec }}.diff')
        $path_nuspec_diff_except_files = [System.IO.Path]::GetFullPath('${{ steps.pack.outputs.path_nuspec }}.except-files.diff')

        dotnet msbuild /t:GenerateNuspecDifference `
          -nologo `
          /p:Configuration=Release `
          /p:NoBuild=true `
          /p:APIListEnableGenerating=false `
          /p:NuspecDifferenceOutputPath="$path_nuspec_diff" `
          /p:NuspecDifferenceExceptFilesOutputPath="$path_nuspec_diff_except_files" `
          ${{ steps.package-info.outputs.package_source_dir }}

        '## :package: .nuspec diff'   >> $Env:GITHUB_STEP_SUMMARY
        ''                            >> $Env:GITHUB_STEP_SUMMARY
        '```diff'                     >> $Env:GITHUB_STEP_SUMMARY
        cat $path_nuspec_diff         >> $Env:GITHUB_STEP_SUMMARY
        '```'                         >> $Env:GITHUB_STEP_SUMMARY

        # set outputs
        "path_nuspec_diff=${path_nuspec_diff}" >> $Env:GITHUB_OUTPUT
        "path_nuspec_diff_except_files=${path_nuspec_diff_except_files}" >> $Env:GITHUB_OUTPUT

    - name: Upload ${{ steps.pack.outputs.artifact_name_nupkg }}
      if: ${{ steps.package-info.outputs.package_can_release == 'True' }}
      uses: actions/upload-artifact@v4.6.1
      with:
        name: ${{ steps.pack.outputs.artifact_name_nupkg }}
        path: ${{ steps.pack.outputs.path_nupkg }}
        retention-days: 1

    - name: Create release working branch for ${{ steps.package-info.outputs.package_id_with_version }}
      run: |
        # create release working branch from detached HEAD
        git checkout -b '${{ steps.release-info.outputs.working_branch }}'

        # attempt to add changes of API list
        API_LIST_DIR='${{ inputs.path_prefix_apilist }}${{ steps.package-info.outputs.package_id }}'

        if [ -d "$API_LIST_DIR" ]; then
          if git add "${API_LIST_DIR}/*.apilist.cs"; then
            # commit API list changes to release working branch
            if git commit -m "update API list ${{ steps.package-info.outputs.package_id_with_version }}"; then
              HAS_COMMIT=true
            fi
          else
            echo "The API list has no changes."
          fi
        else
          echo "The API list was not generated."
        fi

        if [ -z "$HAS_COMMIT" ]; then
          echo "## API list" >> $GITHUB_STEP_SUMMARY
          echo "The API list was not generated or has no changes." >> $GITHUB_STEP_SUMMARY

          # commit an empty commit instead. it is required to create pull request.
          git commit --allow-empty -m "create release branch for ${{ steps.package-info.outputs.package_id_with_version }}"
        fi

        # push release working branch to create pull request
        if [[ '${{ inputs.dry_run }}' != 'true' ]]; then
          git push origin ${{ steps.release-info.outputs.working_branch }}
        fi

    - name: Create extra release contents
      id: extra-release-contents
      shell: pwsh
      run: |
        if (Test-Path -Path '${{ steps.nuspec-diff.outputs.path_nuspec_diff }}') {
          $nuspec_diff = Get-Content -Path '${{ steps.nuspec-diff.outputs.path_nuspec_diff }}'
        }
        else {
          $nuspec_diff = ''
        }

        if (Test-Path -Path '${{ steps.nuspec-diff.outputs.path_nuspec_diff_except_files }}') {
          $nuspec_diff_except_files = Get-Content -Path '${{ steps.nuspec-diff.outputs.path_nuspec_diff_except_files }}'
        }
        else {
          $nuspec_diff_except_files = ''
        }

        # Target:
        #   "pullrequest": Is an extra content for the pull request. Will be added to pull request body.
        #   "releasenote": Is an extra content for the release note. Will be uploaded to gist for this release.
        $contents = @(
          [PSCustomObject]@{
            Title = ".nuspec diff"
            Target = "pullrequest"
            FileName = 'release-target.nuspec.diff'
            Content = $nuspec_diff
            OutputToSummaryIfExceededMaxChars = $false
          },
          [PSCustomObject]@{
            # this entry is expected to be shown as a gist's summary
            Title = '${{ steps.package-info.outputs.package_id_with_version }} Release Notes'
            Target = "releasenote"
            FileName = 'releasenote-${{ steps.package-info.outputs.package_id_with_version }}.md'
            Content = '${{ steps.package-info.outputs.package_branch }}/${{ steps.package-info.outputs.package_id_with_version }}'
            OutputToSummaryIfExceededMaxChars = $false
          },
          [PSCustomObject]@{
            Title = "Change log"
            Target = "releasenote"
            FileName = 'releasenote.section1.changelog.md'
            Content = git log `
              ${{ steps.package-info.outputs.package_prevver_ref }}..HEAD `
              --pretty=format:'- %cs [%s](${{ github.server_url }}/${{ github.repository }}/commit/%H)' `
              -- `
              ${{ steps.package-info.outputs.package_source_dir }} `
              | jq -Rr `@html
            OutputToSummaryIfExceededMaxChars = $false
          },
          [PSCustomObject]@{
            Title = "API changes"
            Target = "releasenote"
            FileName = 'releasenote.section2.api-changes.diff'
            Content = git diff `
              --unified=10000 `
              ${{ github.sha }}..${{ steps.release-info.outputs.working_branch }} `
              -- `
              '${{ inputs.path_prefix_apilist }}${{ steps.package-info.outputs.package_id }}/'
            OutputToSummaryIfExceededMaxChars = $false
          },
          [PSCustomObject]@{
            Title = "Package metadata changes"
            Target = "releasenote"
            FileName = 'releasenote.section3.package-changes.diff'
            Content = $nuspec_diff_except_files
            OutputToSummaryIfExceededMaxChars = $false
          },
          [PSCustomObject]@{
            Title = "Full changes"
            Target = "releasenote"
            FileName = 'releasenote.section4.full-changes.diff'
            Content = git diff `
              --ignore-cr-at-eol `
              --ignore-space-at-eol `
              --ignore-all-space `
              --ignore-blank-lines `
              ${{ steps.package-info.outputs.package_prevver_ref }}..HEAD `
              -- `
              ${{ steps.package-info.outputs.package_source_dir }}
            OutputToSummaryIfExceededMaxChars = $false
          }
        )

        foreach ($content in $contents) {
          if ( '${{ inputs.dry_run }}' -ieq 'true' ) {
            "########## $($content.Title) ###########"
            $content.Content
          }
          elseif ( 0 -lt $content.Content.Length ) {
            Out-File -FilePath $content.FileName -Encoding utf8 -InputObject $($content.Content -join "`n")

            $content | Add-Member -MemberType NoteProperty -Name 'IsWritten' -Value $true
          }
        }

        $contents_json = $contents | where IsWritten | select Title,FileName,Target,OutputToSummaryIfExceededMaxChars | ConvertTo-Json -Compress

        "::debug::output: '${contents_json}'"

        # set outputs
        "contents=${contents_json}" >> $Env:GITHUB_OUTPUT

    - name: Create release note for ${{ steps.package-info.outputs.package_id_with_version }}
      id: releasenote
      shell: pwsh
      env:
        GH_TOKEN: ${{ secrets.token_gist }}
      run: |
        $dry_run = '${{ inputs.dry_run }}' -ieq 'true'
        $description = '${{ steps.package-info.outputs.package_id }} ${{ steps.package-info.outputs.package_version }} Release Notes'

        # 'select' returns single scalar value if number of selected item is zero, so converts to an array again
        $files = @(
          '${{ steps.extra-release-contents.outputs.contents }}' |
          ConvertFrom-Json |
          where Target -eq 'releasenote' |
          select -ExpandProperty FileName
        )

        if ( -not $dry_run -and $files.Count -le 0 ) {
          "::warning::could not create gist with empty files"
          exit 0
        }

        $url = $dry_run `
          ? '(dry-run)' `
          : $(gh gist create --public --desc "${description}" @files)

        if ( [string]::IsNullOrEmpty($url) ) {
          "::error::could not create gist '${description}'"
          exit 1
        }

        # set outputs
        if (-not $dry_run) {
          "url=${url}" >> $Env:GITHUB_OUTPUT
        }

        "## Release notes" >> $Env:GITHUB_STEP_SUMMARY
        "Created gist: [${description}](${url})" >> $Env:GITHUB_STEP_SUMMARY

    - name: Create pull request from branch ${{ steps.release-info.outputs.working_branch }}
      id: pullrequest
      shell: pwsh
      env:
        GH_TOKEN: ${{ secrets.token_pullrequest }}
      run: |
        $dry_run = '${{ inputs.dry_run }}' -ieq 'true'
        $pr_title = 'Release ${{ steps.package-info.outputs.package_branch }}/${{ steps.package-info.outputs.package_id_with_version }}'

        # limit the maximum number of characters in the PR body text to the value below
        # 'pull request create failed: GraphQL: Body is too long (maximum is 65536 characters) (createPullRequest)'
        Set-Variable -Name pr_body_max_chars -Value 60000 -Option Constant

        #
        # construct pull request body
        # note: beware of changing output format on this section; these information will be parsed and referenced by subsequent workflows
        #
        $pr_body = New-Object System.Text.StringBuilder -ArgumentList 2048

        [void]$pr_body.AppendFormat(
          'Automatically generated by workflow [{0} #{1}]({2}).',
          '${{ github.workflow }}',
          '${{ github.run_number }}',
          '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        ).AppendLine()
        [void]$pr_body.AppendLine()

        [void]$pr_body.AppendLine('# Release target')
        [void]$pr_body.AppendLine('- package_target_tag: `${{ steps.package-info.outputs.package_target_tag }}`')
        [void]$pr_body.AppendLine('- package_prevver_ref: `${{ steps.package-info.outputs.package_prevver_ref }}`')
        if ('${{ steps.package-info.outputs.package_prevver_tag }}') {
          [void]$pr_body.AppendLine('- package_prevver_tag: `${{ steps.package-info.outputs.package_prevver_tag }}`')
        }
        else {
          [void]$pr_body.AppendLine('- package_prevver_tag: -')
        }
        [void]$pr_body.AppendLine('- package_id: `${{ steps.package-info.outputs.package_id }}`')
        [void]$pr_body.AppendLine('- package_id_with_version: `${{ steps.package-info.outputs.package_id_with_version }}`')
        [void]$pr_body.AppendLine('- package_version: `${{ steps.package-info.outputs.package_version }}`')
        [void]$pr_body.AppendLine('- package_branch: `${{ steps.package-info.outputs.package_branch }}`')
        [void]$pr_body.AppendLine('- release_working_branch: `${{ steps.release-info.outputs.working_branch }}`')
        [void]$pr_body.AppendLine('- release_tag: `${{ steps.release-info.outputs.tag }}`')
        if ( '${{ steps.package-info.outputs.package_can_release }}' -ieq 'True' ) {
          [void]$pr_body.AppendLine('- release_prerelease: `${{ steps.package-info.outputs.package_is_prerelease }}` ❗Change this value to `true` to publish release note as a prerelease.')
        }
        else {
          [void]$pr_body.AppendLine('- release_prerelease: `true`')
        }
        [void]$pr_body.AppendLine('- release_draft: `false` ❗Change this value to `true` to publish release note as a draft.')
        [void]$pr_body.AppendLine('- release_note_url: [`${{ steps.releasenote.outputs.url }}`](${{ steps.releasenote.outputs.url }})')

        if ( '${{ steps.package-info.outputs.package_can_release }}' -ieq 'True' ) {
          [void]$pr_body.AppendLine('- artifact_name_nupkg: `${{ steps.pack.outputs.artifact_name_nupkg }}` ❗Remove this line or change this value to empty to prevent publishing packages.')
        }

        [void]$pr_body.AppendLine()

        #
        # append extra contents
        #
        $pr_body_content_has_redirected_to_step_summary = $false
        $pr_body_contents = '${{ steps.extra-release-contents.outputs.contents }}' |
          ConvertFrom-Json |
          where Target -eq 'pullrequest'

        foreach ($pr_body_content in $pr_body_contents) {
          $pr_body_appendix = New-Object System.Text.StringBuilder -ArgumentList 2048

          [void]$pr_body_appendix.AppendLine("# $($pr_body_content.Title)")
          [void]$pr_body_appendix.AppendLine('```' + [System.IO.Path]::GetExtension($($pr_body_content.FileName)).TrimStart('.'))
          [void]$pr_body_appendix.AppendLine($(Get-Content -Path $pr_body_content.FileName) -join "`n")
          [void]$pr_body_appendix.AppendLine('```')

          "::debug::pr_body.legnth: $($pr_body.Length) pr_body_appendix.length: $($pr_body_appendix.Length)"

          if ($pr_body_max_chars -lt ($pr_body.Length + $pr_body_appendix.Length)) {
            "::warning::The length of the PR body exceeds the maximum character count. (Title: $($pr_body_content.Title))"

            if ($pr_body_content.OutputToSummaryIfExceededMaxChars -ieq 'true') {
              if (-not $pr_body_content_has_redirected_to_step_summary) {
                "## Pull request extra content" >> $Env:GITHUB_STEP_SUMMARY

                $pr_body_content_has_redirected_to_step_summary = $true
              }

              '##' + $pr_body_appendix.ToString() >> $Env:GITHUB_STEP_SUMMARY
            }
          }
          else {
            [void]$pr_body.Append($pr_body_appendix.ToString())
          }
        }

        #
        # create pull request
        #
        $pr_body_file = [System.IO.Path]::GetFullPath('pr-body.md')

        if ( $dry_run ) {
          "================================================"
          $pr_body.ToString()
          "================================================"
        }
        else {
          Out-File -FilePath $pr_body_file -Encoding utf8 -InputObject $pr_body.ToString()
        }

        # ref: https://cli.github.com/manual/gh_pr_create
        $pr_create_options = @(
          '--base', '${{ steps.package-info.outputs.package_branch }}',
          '--head', '${{ steps.release-info.outputs.working_branch }}',
          '--assignee', '${{ github.repository_owner }}',
          '--no-maintainer-edit',
          '--title', $pr_title,
          '--body-file', $pr_body_file
        )

        $pr_create_with_label_options = $null

        if ( ! [string]::IsNullOrEmpty( '${{ inputs.release_target_pr_label }}' ) ) {
          $pr_create_with_label_options = $pr_create_options + @(
            '--label', '${{ inputs.release_target_pr_label }}'
          )
        }

        # first, attempt to create pull request with label (if label is specified)
        $pr_url = $null

        if ( $pr_create_with_label_options ) {
          "gh pr create ${pr_create_with_label_options}"

          $pr_url = $dry_run `
            ? '(dry-run)' `
            : $(gh pr create $pr_create_with_label_options)

          if ( [string]::IsNullOrEmpty($pr_url) ) {
            "::error::Could not create a new pull request or could not set label to the created pull request. Ensure that the label '${{ inputs.release_target_pr_label }}' is created and set the label to PR manually."
          }
        }

        # next, create pull request without label (if failed or label is not specified)
        if ( [string]::IsNullOrEmpty($pr_url) ) {
          "gh pr create ${pr_create_options}"

          $pr_url = $dry_run `
            ? '(dry-run)' `
            : $(gh pr create $pr_create_options)
        }

        if ( [string]::IsNullOrEmpty($pr_url) ) {
          "::error::could not create pull request for ${pr_title}"
          exit 1
        }

        # set outputs
        if (-not $dry_run) {
          "url=${pr_url}" >> $Env:GITHUB_OUTPUT
        }

        "## Pull request" >> $Env:GITHUB_STEP_SUMMARY
        "Created pull request: [${pr_title}](${pr_url})" >> $Env:GITHUB_STEP_SUMMARY

        exit 0

    - name: Dispose pull request
      continue-on-error: true
      if: inputs.dry_run != 'true' && (failure() || cancelled()) && steps.pullrequest.outputs.url != ''
      env:
        GH_TOKEN: ${{ secrets.token_pullrequest }}
      run: |
        gh pr close ${{ steps.pullrequest.outputs.url }} --delete-branch --comment 'This release target was cancelled or failed.'

    - name: Dispose release working branch
      continue-on-error: true
      if: inputs.dry_run != 'true' && (failure() || cancelled())
      run: |
        git push origin :${{ steps.release-info.outputs.working_branch }}

    - name: Dispose release note
      continue-on-error: true
      if: inputs.dry_run != 'true' && (failure() || cancelled()) && steps.releasenote.outputs.url != ''
      env:
        GH_TOKEN: ${{ secrets.token_gist }}
      run: |
        gh gist delete ${{ steps.releasenote.outputs.url }}
